name: Deploy to Server

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Deploy to server
      env:
        HOST: ${{ secrets.HOST }}
        USER: ${{ secrets.USER }}
        PASS: ${{ secrets.PASSWORD }}
      run: |
        # Проверка подключения
        sshpass -p $PASS ssh -o StrictHostKeyChecking=no $USER@$HOST echo "Connection successful"

        # Основной скрипт развертывания
        sshpass -p $PASS ssh -o StrictHostKeyChecking=no $USER@$HOST << EOF
          # Обновляем пакеты и устанавливаем необходимые инструменты
          sudo apt-get update
          sudo apt-get install -y docker.io net-tools nginx

          # Очистка старых образов и контейнеров
          echo "--- Cleaning up old Docker images and containers ---"
          sudo docker image prune -af
          sudo docker container prune -f

          # Создаем директорию проекта, если её нет
          mkdir -p /home/$USER/youtube_proxy_bot

          sudo cp /home/$USER/youtube_proxy_bot/nginx.conf /etc/nginx/sites-available/youtube_proxy_bot


          sudo ln -sf /etc/nginx/sites-available/youtube_proxy_bot /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default  # Удаляем дефолтный сайт
          sudo nginx -t && sudo systemctl restart nginx
        EOF

        # Копируем файлы проекта на сервер
        sshpass -p $PASS scp -o StrictHostKeyChecking=no -r ./* $USER@$HOST:/home/$USER/youtube_proxy_bot/

        sshpass -p $PASS ssh -o StrictHostKeyChecking=no $USER@$HOST << EOF
          cd /home/$USER/youtube_proxy_bot

          # Проверяем наличие необходимых файлов
          echo "--- Checking files ---"
          ls -l main.py index.html requirements.txt

          # Проверяем и устанавливаем правильные права доступа
          sudo chown -R www-data:www-data /home/$USER/youtube_proxy_bot
          sudo chmod -R 755 /home/$USER/youtube_proxy_bot

          # Обновляем Dockerfile
          cat > Dockerfile << EOD
          FROM python:3.9-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          COPY main.py .
          COPY index.html .
          EXPOSE 8080
          CMD ["python", "main.py"]
          EOD

          # Строим Docker образ
          sudo docker build -t youtube_proxy_bot .

          # Останавливаем и удаляем старый контейнер, если он есть
          sudo docker stop youtube_proxy_bot || true
          sudo docker rm youtube_proxy_bot || true

          # Запускаем новый контейнер
          sudo docker run -d --name youtube_proxy_bot -p 8080:8080 youtube_proxy_bot

          echo "--- Docker container status ---"
          sudo docker ps -a
          
          echo "--- Docker container logs ---"
          sudo docker logs youtube_proxy_bot 2>&1 | tail -n 50
          
          echo "--- Netstat for port 8080 on host ---"
          sudo netstat -tulpn | grep :8080

          echo "--- Testing access to the application ---"
          curl -I http://localhost:8080/

          echo "--- Testing access through Nginx ---"
          curl -I http://localhost/

          echo "--- Nginx status ---"
          sudo systemctl status nginx

          echo "--- Nginx error log ---"
          sudo tail -n 50 /var/log/nginx/error.log

          echo "--- Nginx access log ---"
          sudo tail -n 50 /var/log/nginx/access.log

          echo "--- Directory contents ---"
          ls -R /home/$USER/youtube_proxy_bot

          echo "--- Content of main.py ---"
          cat /home/$USER/youtube_proxy_bot/main.py

          echo "--- Disk usage ---"
          df -h

          echo "--- Content of index.html ---"
          cat /home/$USER/youtube_proxy_bot/index.html
        EOF