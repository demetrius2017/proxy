from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WEB_APP_URL = "https://appproxy.vercel.app/"
ANDROID_TEXT = "–û—Ç–∫—Ä—ã—Ç—å App Launcher –¥–ª—è Android"
IOS_TEXT = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone"

async def send_start_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand("about", "–û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")
    ]
    await context.bot.set_my_commands(commands)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [InlineKeyboardButton(text=ANDROID_TEXT, web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton(text=IOS_TEXT, callback_data="ios_instructions")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ App Launcher! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_start_message(update, context)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "ios_instructions":
        instructions = (
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π iPhone:\n\n"
            "1. –ó–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É: https://appproxy.vercel.app/\n"
            "2. –û—Ç–∫—Ä—ã—Ç—å –≤ ... "
            "3. –í—ã–±–µ—Ä–µ—Ç–µ –±—Ä–∞—É–∑–µ—Ä Chrome\n\n"
            "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å App Launcher –Ω–∞ –≤–∞—à–µ–º iPhone."
        )
        await query.edit_message_text(
            text=instructions,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_start")]])
        )
    elif query.data == "back_to_start":
        await send_start_message(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é App Launcher:\n\n"
        "‚Ä¢ –î–ª—è Android: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å App Launcher –¥–ª—è Android'\n"
        "‚Ä¢ –î–ª—è iPhone: —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, –Ω–∞–∂–∞–≤ –Ω–∞ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone'\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )
    await update.message.reply_text(help_text)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = (
        "–û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ App Launcher:\n\n"
        "App Launcher - —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º. "
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º —Å–µ—Ä–≤–∏—Å–∞–º.\n\n"
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö!"
    )
    await update.message.reply_text(about_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token('6740830002:AAFcw7PqsWgGp4cJna24vofPtU1P2dCT4yE').build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('about', about_command))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()